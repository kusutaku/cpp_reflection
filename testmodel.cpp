#include "testmodel.hpp"

using std::string;

TestModel::TestModel()
// default value
: _testInt(10),
  _testLong(0),
  _testFloat(0),
  _testDouble(0),
  _testBool(true),
  _testString("")
{
  // add this function in constructor
  mapParameters();
}

void TestModel::mapParameters() {
  // *** important ***
  // map all properties here
  mapParameter(TO_STRING(_testInt), _testInt);
  mapParameter(TO_STRING(_testLong), _testLong);
  mapParameter(TO_STRING(_testFloat), _testFloat);
  mapParameter(TO_STRING(_testDouble), _testDouble);
  mapParameter(TO_STRING(_testBool), _testBool);
  mapParameter(TO_STRING(_testString), _testString);
}


// ordinary accessors
// (can be generated by IDE or scripting)
int TestModel::getTestInt() const {
  return _testInt;
}
void TestModel::setTestInt(int testInt) {
  this->_testInt = testInt;
}
long TestModel::getTestLong() const {
  return _testLong;
}
void TestModel::setTestLong(long testLong) {
  this->_testLong = testLong;
}
float TestModel::getTestFloat() const {
  return _testFloat;
}
void TestModel::setTestFloat(float testFloat) {
  this->_testFloat = testFloat;
}
double TestModel::getTestDouble() const {
  return _testDouble;
}
void TestModel::setTestDouble(double testDouble) {
  this->_testDouble = testDouble;
}
bool TestModel::getTestBool() const {
  return _testBool;
}
void TestModel::setTestBool(bool testBool) {
  this->_testBool = testBool;
}
string TestModel::getTestString() const {
  return _testString;
}
void TestModel::setTestString(string testString) {
  this->_testString = testString;
}

